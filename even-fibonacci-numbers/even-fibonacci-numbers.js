/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

const evenFibonacciNums = (limit) => {
  // create a variable for sum
  let sum = 0;
  // set a starting point of the counter which is from 2
  let i = 2;
  // set the frist 2 value on the fibonacci list, we need this for fibonacci start to work because is have to minus 1 and 2
  let fibList = [0, 1];
  // set condition where the output trem need to be under the limit
  while (fibList[i - 2] + fibList[i - 1] < limit) {
    // then assign the output term to the proper position of the array
    fibList[i] = fibList[i - 2] + fibList[i - 1];
    // intrement the counter
    i++;
  }
  // take out the 0 from the list for easy way to add even numbers
  fibList.shift();
  // now iterate through the fibList and look for every 3rd number, because after 2 odd numbers comes a even number, so we need every 3rd number of the list
  for (var j = 2; j < fibList.length; j+=3) {
    // add the current number to the sum
    sum += fibList[j];
  }
  // return sum to user
  return sum;
};

// console.log(evenFibonacciNums(4000000));